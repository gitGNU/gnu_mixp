\input texinfo  @c -*-texinfo-*-

@c Copyright (C) 2011 Thien-Thi Nguyen
@c
@c This file is provided under the terms of the GNU FDL.
@c See fdl.texi for details.

@c %**start of header
@setfilename mixp.info
@documentencoding UTF-8
@settitle Mixp Manual
@syncodeindex fn cp
@c %**end of header

@include version.texi

@c used by install-info to install this file in the directory file
@dircategory Scheme Programming
@direntry
* Mixp: (mixp).                A Guile interface to expat, the XML parser.
@end direntry

@titlepage
@title Mixp Manual
@subtitle For use with Mixp @value{VERSION}

@author Thien-Thi Nguyen
@author Thierry BÃ©zecourt
@page
@end titlepage
@contents

@ifnottex
@node Top
@top  Mixp Manual

This is Mixp, an XML Parser for Guile, written as an interface to
James Clark's expat library.
The documentation is, of course, incomplete, and the interface is
subject to change.  However, it should be sufficient to get started.
This documentation was last updated on @value{UPDATED} and covers
Mixp version @value{VERSION}.
@end ifnottex

@menu
* Introduction::                Look before you leap
* Expat interface::             Reference for (mixp expat)
* High-level extensions::       Reference for (mixp utils)

* GNU FDL::                     Copying and sharing this documentation

* Index::
@end menu

@node Introduction
@chapter Introduction

Mixp is a Scheme interface to James Clark's expat library@footnote{See
the @uref{http://www.jclark.com/xml/expatfaq.html, FAQ} and
@uref{http://expat.sourceforge.net/, project page}, for more info.}.
It may be used to parse XML documents with Guile.

If you do not know expat, first have a look at the sample program
@xref{Sample programs}.  Typically, you will create a parser object
with @code{parser-create}, then associate one or more handlers to it
with @code{hset!}, then parse the document with @code{parse}.
The handlers work by side-effect, so unless the algorithm is pure
input/output, most likely you will also need to retrieve the state
they maintain, after the parse.  @xref{Expat interface}.

If you happen to know expat already, you will find easily what you
are looking for by taking a C expat function name, removing the
@code{XML_}, using hyphens instead of capital letters to separate the
words, and searching it in the reference documentation.  In most
cases, the prototype is the same, modulo the differences between C
and Scheme.

@menu
* Sample programs::             Hello, world
* Loading Mixp::                The @code{use-modules} form
* Mixp components::             Organization of Mixp modules
* How to...::                   How to perform common tasks
* Bugs and suggestions::        Contact me
@end menu

@node Sample programs
@section Sample programs
@cindex sample programs

The following sample program reads an XML file (provided with the
Mixp distribution), and displays its start and end tags.  You can
launch a Guile shell from the @file{test/} directory of the
distribution, and execute this code.  Your @code{GUILE_LOAD_PATH}
variable should contain the directory in which you installed Mixp
(that is, the directory which contains the @file{mixp/} subdirectory).

@lisp
(use-modules ((mixp expat) #:prefix E:)
             ((mixp utils) #:prefix U:))

(define (trace prefix)
  (lambda (name . ignored)
    (display prefix)
    (display name)
    (newline)))

;; Create the parser object.
(let ((parser (E:parser-create)))
  ;; Specify handlers.
  (E:hset! parser `((element-start
                     . ,(trace "start "))
                    (element-end
                     . ,(trace "end "))))
  ;; Parse the file.
  (call-with-input-file "REC-xml-19980210.xml"
    (lambda (port)
      (U:parse-data port parser))))
@end lisp

For more information about the Expat interface and handlers, @xref{Expat
interface}.

The following sample program builds a hierarchical tree structure from
an XML document which resides in a string.  This tree structure should be
easy to use with traditional Scheme procedures.

@lisp
(use-modules ((mixp utils) #:prefix U:))

(let ((xml-doc "<foo name='Paul'><bar>Some text</bar><void/></foo>"))
  (call-with-input-string xml-doc U:xml->tree))
@result{}
((element ("foo" (("name" . "Paul")))
   (element ("bar" ())
     (character-data "Some text"))
   (element ("void" ()))))
@end lisp

For more information about this interface, @xref{High-level extensions}.

@node Loading Mixp
@section Loading Mixp
@cindex loading Mixp

From the Guile shell or from a Guile script, you should type the
following commands before using the Mixp API:

@lisp
(use-modules (mixp expat))
(use-modules (mixp utils))
@end lisp

Actually, you may load just @code{(mixp expat)} if you intend to use
only the raw expat interface (@pxref{Expat interface}).
You need @code{(mixp utils)} if you want to use the extension
procedures (@pxref{High-level extensions}).

@node Mixp components
@section Mixp components
@cindex mixp components

Mixp contains two Scheme modules:

@itemize @bullet
@item
@code{(mixp expat)} is the low-level interface to expat.  It doesn't
stay as close as possible to the expat API, but someone who already
knows expat will be able to note gross similarities.

@item
@code{(mixp utils)} contains additional procedures that might be
useful.  For example, if you need to parse an XML file, you can use
@code{call-with-input-file} and @code{parse-data} instead of
@code{parse} (from @code{(mixp expat)}).  This module may evolve into
a higher-level interface, for example an object-based interface.
@end itemize

From another point of view, Mixp contains two files in a directory
@file{mixp}, which in turn lives in a directory somewhere along your
@code{GUILE_LOAD_PATH}.

@node How to...
@section How to...
@cindex recipes

This section describes a few common tasks which may be solved with Mixp.

@itemize @bullet
@item Check that a document is well-formed.

Use @code{parse-data} from @code{(mixp utils)} without specifying a
parser.  A default one will be created, and it will do nothing
interesting except raise errors if there is any error in the document:

@lisp
(call-with-input-string "<doc><elem></elem>" parse-data)
@end lisp

@xref{High-level extensions}.

@item Retrieve the content of an element.

Suppose you want to retrieve the text contained between an opening tag
and the matching closing tag.  You may do that by using an
element-handler and a character-data-handler together.  The following
code will retrieve the text between @code{<title>} and @code{</title} in
an XML document:

@lisp
(use-modules ((mixp expat) #:select E:)
             ((mixp utils) #:select U:))

(let ((parser (E:parser-create))
      (in-title? #f) ; becomes #t inside the tag
      (title ""))    ; will contain the result

  (define (toggle sense)
    (lambda (name . ignored)
      (and (string=? "title" name)
           (set! in-title? sense))))

  (define (handle-character-data value)
    (and in-title?
         (set! title (string-append title value))))

  (E:hset! parser `((element-start
                     . ,(toggle #t))
                    (element-end
                     . ,(toggle #f))
                    (character-data
                     . ,handle-character-data)))
  (call-with-input-string
   "<doc><title>Hello</title></doc>"
   (lambda (port)
     (U:parse-data port parser)))
  (display title)
  (newline))
@end lisp

@item Build a tree structure from an XML document.

Use @code{xml->tree}.

@lisp
(use-modules ((mixp utils) #:prefix U:))
(call-with-input-file "file.xml" U:xml->tree)
@end lisp

@xref{High-level extensions}.

@item Read the external DTD.

The following program will read an XML document in @file{foo.xml},
parse the DTD which may be referenced in the @code{DOCTYPE}
declaration, and expand the entities.

@lisp
(use-modules ((mixp expat) #:prefix E:)
             ((mixp utils) #:prefix U:))

(define (fso s . args)
  (apply simple-format #t s args))

;; Create the parser object.
(let ((parser (E:parser-create)))

  (define (xref-h context base system-id public-id)
    (fso "Ref to external entity: ~A.~%" system-id)
    (open-input-file system-id))

  (E:set-param-entity-parsing
   parser 'XML_PARAM_ENTITY_PARSING_ALWAYS)

  ;; Specify callback functions.
  (E:hset! parser `((character-data
                     . ,(lambda (value)
                          (fso "Char: ~A.~%" value)))
                    (external-entity-ref
                     . ,xref-h)))

  ;; Parse the file.
  (call-with-input-file "foo.xml"
    (lambda (port)
      (U:parse-data port parser))))
@end lisp

@item Specify handlers to be called in the DTD.

You may want to define handlers to be called when Mixp parses the DTD
and finds an element declaration or an attribute list declaration.
Unfortunately, this is not possible, due to limitations in expat.

However, you may try to use the default handler (@pxref{Expat handlers}).
If DTD reading is enabled (see the previous item), then the default
handler will be called repeatedly while reading the DTD, and will
receive each time a part of the DTD.  However, there is no guarantee
about what part of the DTD it will receive each time. Building a
representation of the DTD would be possible with the default handler,
but not easy.

@end itemize

@node Bugs and suggestions
@section Bugs and suggestions

Please send bug reports to [TODO: BUG-TRACKER-URL].  We always appreciate
feedback about Mixp, and suggestions about what could be improved in the
interface.

@include ref.texi

@node GNU FDL
@unnumbered GNU FDL
@include fdl.texi

@node Index
@unnumbered Index

@printindex cp

@bye

@c mixp.texi ends here
